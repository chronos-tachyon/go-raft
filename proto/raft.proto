syntax = "proto3";

package raft;

message Peer {
  uint32 id = 1;
  bytes ip = 2;
  uint32 port = 3;
  string zone = 4;
}

message LogEntry {
  uint64 term = 1;
  bytes command = 2;
}

message State {
  repeated Peer peers = 1;
  repeated LogEntry logs = 2;
  uint32 voted_for_id = 3;
  uint64 current_term = 4;
  uint64 start_term = 5;
  uint64 start_index = 6;
  bytes snapshot = 7;
}

message Packet {
  enum Type {
    INVALID = 0;
    VOTE_REQUEST = 1;
    VOTE_RESPONSE = 2;
    APPEND_ENTRIES_REQUEST = 3;
    APPEND_ENTRIES_RESPONSE = 4;
    NOMINATE_REQUEST = 5;
    INFORM_REQUEST = 6;
  }
  Type type = 1;
  bytes payload = 2;
}

message VoteRequest {
  // The currentTerm of the caller.
  uint64 term = 1;

  // Term of the last entry in the caller's log.
  uint64 latest_term = 2;

  // Index of the last entry in the caller's log.
  uint64 latest_index = 3;
}

message VoteResponse {
  // The currentTerm of the callee.
  uint64 term = 1;

  // true iff the follower/callee granted its vote to the candidate/caller.
  bool granted = 2;

  // true iff the candidate/caller is at least as caught up as the follower/callee.
  bool log_is_ok = 3;
}

message AppendEntry {
  // Term in which the entry was proposed.
  uint64 term = 1;

  // The state machine command to be committed.
  bytes command = 2;
}

message AppendEntriesRequest {
  // The currentTerm of the caller.
  uint64 term = 1;

  // The log entries to append.  May be empty.
  repeated AppendEntry entries = 2;

  // Term of the entry preceding Entries.
  uint64 prev_log_term = 3;

  // Index of the entry preceding Entries,
  // or log.LatestIndex() if Entries is empty.
  uint64 prev_log_index = 4;

  // The log.CommitIndex of the leader.
  uint64 leader_commit_index = 5;
}

message AppendEntriesResponse {
  // The currentTerm of the callee.
  uint64 term = 1;

  // True iff new entries were added to the log.
  bool success = 2;

  // The callee's resulting log.LatestIndex().
  uint64 latest_index = 3;

  // The callee's resulting log.CommitIndex.
  uint64 commit_index = 4;
}

message NominateRequest {
  // The currentTerm of the caller.
  uint64 term = 1;
}

message InformRequest {
  // The currentTerm of the caller.
  uint64 term = 1;

  // The caller's current leader, i.e. the peer which sent an
  // AppendEntriesRequest to the caller.
  uint32 leader_id = 2;
}
