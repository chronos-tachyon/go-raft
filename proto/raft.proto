syntax = "proto3";

package raft;

option go_package = "proto";

message Peer {
  enum State {
    BLANK = 0;
    LEARNING = 1;
    JOINING = 2;
    STABLE = 3;
    LEAVING = 4;
  }
  uint32 id = 1;
  string addr = 2;
  State state = 3;
}

message Configuration {
  uint64 id = 1;
  repeated Peer peers = 2;
}

message Metadata {
  // A counter increased monotonically each time a metadata file is written.
  uint64 metadata_version = 1;

  // A counter increased monotonically each time a snapshot file is written.
  uint64 snapshot_version = 2;

  // The index of the first log entry.  This is also the index of the log entry
  // that immediately follows the snapshot.
  uint64 start_index = 3;

  // The election term of the log entry that came immediately before start_index.
  uint64 before_start_term = 4;

  // The current election term.
  uint64 current_term = 5;

  // The ID of the server that this server voted for.
  uint32 voted_for = 6;

  // The current cluster configuration at the time of this metadata save.
  Configuration configuration = 7;
}

message Snapshot {
  // The state machine's snapshot.
  bytes payload = 1;
}

message LogEntry {
  enum Type {
    // NOP is a no-op.  Payload is empty.
    NOP = 0;

    // COMMAND is a command for the state machine.  Payload is the command.
    COMMAND = 1;

    // CONFIGURATION is a new configuration.  Payload is a raft.Configuration proto.
    CONFIGURATION = 2;
  }

  // The index of this log entry.  Not used on the wire.
  uint64 index = 1;

  // The election term in which this entry was recorded.
  uint64 term = 2;

  // The type of entry.  Determines the meaning of the payload field.
  Type type = 3;

  // The state change that this entry records.
  bytes payload = 4;
}

message Packet {
  enum Type {
    UNKNOWN = 0;

    ///////////////////////
    // Server <-> Server //
    ///////////////////////

    // Indicates that the caller is a candidate, trying to convince the callee
    // to vote for it.
    //
    // Payload Type: VoteRequest
    VOTE_REQUEST = 1;

    // Response to VOTE_REQUEST.
    //
    // Payload Type: VoteResponse
    VOTE_RESPONSE = 2;

    // Indicates that the caller is the leader, trying to append or commit some
    // log entries.  Doubles as the heartbeat.
    //
    // Payload Type: AppendEntriesRequest
    APPEND_ENTRIES_REQUEST = 3;

    // Response to APPEND_ENTRIES_REQUEST.
    //
    // Payload Type: AppendEntriesResponse
    APPEND_ENTRIES_RESPONSE = 4;

    // Indicates that the caller thinks the callee should be the new leader.
    // No response necessary.
    //
    // Payload Type: NominateRequest
    NOMINATE_REQUEST = 5;

    // Indicates that the caller just received a valid APPEND_ENTRIES_REQUEST
    // from the leader.  Used to detect partial network partitions.
    // No response necessary.
    //
    // Payload Type: InformRequest
    INFORM_REQUEST = 6;

    DISCOVER_REQUEST = 7;
    DISCOVER_RESPONSE = 8;

    ///////////////////////
    // Client <-> Server //
    ///////////////////////

    CREATE_SESSION_REQUEST = 16;
    CREATE_SESSION_RESPONSE = 17;
    DESTROY_SESSION_REQUEST = 18;
    DESTROY_SESSION_RESPONSE = 19;
    QUERY_REQUEST = 20;
    QUERY_RESPONSE = 21;
    WRITE_REQUEST = 22;
    WRITE_RESPONSE = 23;

    //////////////////////
    // Admin <-> Server //
    //////////////////////

    GET_CONFIGURATION_REQUEST = 32;
    GET_CONFIGURATION_RESPONSE = 33;
    SET_CONFIGURATION_REQUEST = 34;
    SET_CONFIGURATION_RESPONSE = 35;
  }

  // The UUID of the Raft cluster which this packet is intended for.
  bytes cluster = 1;

  // The server which sent the packet, or 0 if it came from a client.
  uint32 source_id = 2;

  // The client session ID for this packet, or 0 if this is a server-server packet.
  uint32 session_id = 3;

  // The request ID for this packet, or 0 if this is a server-server packet.
  uint32 request_id = 4;

  // The type of packet.
  Type type = 5;

  // The payload of the packet.  Interpretation depends on the packet type.
  bytes payload = 6;
}

message VoteRequest {
  // The currentTerm of the caller.
  uint64 term = 1;

  // Term of the last entry in the caller's log.
  uint64 latest_term = 2;

  // Index of the last entry in the caller's log.
  uint64 latest_index = 3;
}

message VoteResponse {
  // The currentTerm of the callee.
  uint64 term = 1;

  // true iff the follower/callee granted its vote to the candidate/caller.
  bool granted = 2;

  // true iff the candidate/caller is at least as caught up as the follower/callee.
  bool log_is_ok = 3;
}

message AppendEntriesRequest {
  // The currentTerm of the caller.
  uint64 term = 1;

  // The log entries to append.  May be empty.
  repeated LogEntry entries = 2;

  // Term of the entry preceding Entries.
  uint64 prev_log_term = 3;

  // Index of the entry preceding Entries,
  // or log.LatestIndex() if Entries is empty.
  uint64 prev_log_index = 4;

  // The log.CommitIndex of the leader.
  uint64 leader_commit_index = 5;
}

message AppendEntriesResponse {
  // The currentTerm of the callee.
  uint64 term = 1;

  // True iff new entries were added to the log.
  bool success = 2;

  // The callee's resulting log.LatestIndex().
  uint64 latest_index = 3;

  // The callee's resulting log.CommitIndex.
  uint64 commit_index = 4;
}

message NominateRequest {
  // The currentTerm of the caller.
  uint64 term = 1;
}

message InformRequest {
  // The currentTerm of the caller.
  uint64 term = 1;

  // The caller's current leader, i.e. the server which sent an
  // AppendEntriesRequest to the caller.
  uint32 leader_id = 2;
}

message CreateSessionRequest {
}

message DestroySessionRequest {
}

message QueryRequest {
  bytes command = 1;
}

message WriteRequest {
  bytes command = 1;
}

message GetConfigurationRequest {
}

message SetConfigurationRequest {
  Configuration configuration = 1;
}

message ForceElectionRequest {
  uint64 old_term = 1;
}

message LameDuckRequest {
  bool lameduck_on = 1;
}

message ClientResponse {
  enum Status {
    UNKNOWN = 0;
    OK = 1;
    TIMED_OUT = 2;
    NOT_LEADER = 3;
    CONFLICT = 4;
    INVALID_SESSION = 5;
    INVALID_ARGUMENT = 6;
  }
  Status status = 1;

  bytes payload = 2;
  Configuration configuration = 3;
  uint32 leader_id = 4;
  uint64 current_term = 5;
  uint64 commit_index = 6;
  uint64 next_index = 7;

  string error_message = 16;
  string redirect = 17;
}
