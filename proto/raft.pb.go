// Code generated by protoc-gen-go.
// source: proto/raft.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/raft.proto

It has these top-level messages:
	Peer
	Configuration
	Metadata
	Snapshot
	LogEntry
	Packet
	VoteRequest
	VoteResponse
	AppendEntriesRequest
	AppendEntriesResponse
	NominateRequest
	InformRequest
	CreateSessionRequest
	DestroySessionRequest
	QueryRequest
	WriteRequest
	GetConfigurationRequest
	SetConfigurationRequest
	ForceElectionRequest
	LameDuckRequest
	ClientResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Peer_State int32

const (
	Peer_BLANK    Peer_State = 0
	Peer_LEARNING Peer_State = 1
	Peer_JOINING  Peer_State = 2
	Peer_STABLE   Peer_State = 3
	Peer_LEAVING  Peer_State = 4
)

var Peer_State_name = map[int32]string{
	0: "BLANK",
	1: "LEARNING",
	2: "JOINING",
	3: "STABLE",
	4: "LEAVING",
}
var Peer_State_value = map[string]int32{
	"BLANK":    0,
	"LEARNING": 1,
	"JOINING":  2,
	"STABLE":   3,
	"LEAVING":  4,
}

func (x Peer_State) String() string {
	return proto1.EnumName(Peer_State_name, int32(x))
}

type LogEntry_Type int32

const (
	// NOP is a no-op.  Payload is empty.
	LogEntry_NOP LogEntry_Type = 0
	// COMMAND is a command for the state machine.  Payload is the command.
	LogEntry_COMMAND LogEntry_Type = 1
	// CONFIGURATION is a new configuration.  Payload is a raft.Configuration proto.
	LogEntry_CONFIGURATION LogEntry_Type = 2
)

var LogEntry_Type_name = map[int32]string{
	0: "NOP",
	1: "COMMAND",
	2: "CONFIGURATION",
}
var LogEntry_Type_value = map[string]int32{
	"NOP":           0,
	"COMMAND":       1,
	"CONFIGURATION": 2,
}

func (x LogEntry_Type) String() string {
	return proto1.EnumName(LogEntry_Type_name, int32(x))
}

type Packet_Type int32

const (
	Packet_UNKNOWN Packet_Type = 0
	// Indicates that the caller is a candidate, trying to convince the callee
	// to vote for it.
	//
	// Payload Type: VoteRequest
	Packet_VOTE_REQUEST Packet_Type = 1
	// Response to VOTE_REQUEST.
	//
	// Payload Type: VoteResponse
	Packet_VOTE_RESPONSE Packet_Type = 2
	// Indicates that the caller is the leader, trying to append or commit some
	// log entries.  Doubles as the heartbeat.
	//
	// Payload Type: AppendEntriesRequest
	Packet_APPEND_ENTRIES_REQUEST Packet_Type = 3
	// Response to APPEND_ENTRIES_REQUEST.
	//
	// Payload Type: AppendEntriesResponse
	Packet_APPEND_ENTRIES_RESPONSE Packet_Type = 4
	// Indicates that the caller thinks the callee should be the new leader.
	// No response necessary.
	//
	// Payload Type: NominateRequest
	Packet_NOMINATE_REQUEST Packet_Type = 5
	// Indicates that the caller just received a valid APPEND_ENTRIES_REQUEST
	// from the leader.  Used to detect partial network partitions.
	// No response necessary.
	//
	// Payload Type: InformRequest
	Packet_INFORM_REQUEST             Packet_Type = 6
	Packet_DISCOVER_REQUEST           Packet_Type = 7
	Packet_DISCOVER_RESPONSE          Packet_Type = 8
	Packet_CREATE_SESSION_REQUEST     Packet_Type = 16
	Packet_CREATE_SESSION_RESPONSE    Packet_Type = 17
	Packet_DESTROY_SESSION_REQUEST    Packet_Type = 18
	Packet_DESTROY_SESSION_RESPONSE   Packet_Type = 19
	Packet_QUERY_REQUEST              Packet_Type = 20
	Packet_QUERY_RESPONSE             Packet_Type = 21
	Packet_WRITE_REQUEST              Packet_Type = 22
	Packet_WRITE_RESPONSE             Packet_Type = 23
	Packet_GET_CONFIGURATION_REQUEST  Packet_Type = 32
	Packet_GET_CONFIGURATION_RESPONSE Packet_Type = 33
	Packet_SET_CONFIGURATION_REQUEST  Packet_Type = 34
	Packet_SET_CONFIGURATION_RESPONSE Packet_Type = 35
)

var Packet_Type_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "VOTE_REQUEST",
	2:  "VOTE_RESPONSE",
	3:  "APPEND_ENTRIES_REQUEST",
	4:  "APPEND_ENTRIES_RESPONSE",
	5:  "NOMINATE_REQUEST",
	6:  "INFORM_REQUEST",
	7:  "DISCOVER_REQUEST",
	8:  "DISCOVER_RESPONSE",
	16: "CREATE_SESSION_REQUEST",
	17: "CREATE_SESSION_RESPONSE",
	18: "DESTROY_SESSION_REQUEST",
	19: "DESTROY_SESSION_RESPONSE",
	20: "QUERY_REQUEST",
	21: "QUERY_RESPONSE",
	22: "WRITE_REQUEST",
	23: "WRITE_RESPONSE",
	32: "GET_CONFIGURATION_REQUEST",
	33: "GET_CONFIGURATION_RESPONSE",
	34: "SET_CONFIGURATION_REQUEST",
	35: "SET_CONFIGURATION_RESPONSE",
}
var Packet_Type_value = map[string]int32{
	"UNKNOWN":                    0,
	"VOTE_REQUEST":               1,
	"VOTE_RESPONSE":              2,
	"APPEND_ENTRIES_REQUEST":     3,
	"APPEND_ENTRIES_RESPONSE":    4,
	"NOMINATE_REQUEST":           5,
	"INFORM_REQUEST":             6,
	"DISCOVER_REQUEST":           7,
	"DISCOVER_RESPONSE":          8,
	"CREATE_SESSION_REQUEST":     16,
	"CREATE_SESSION_RESPONSE":    17,
	"DESTROY_SESSION_REQUEST":    18,
	"DESTROY_SESSION_RESPONSE":   19,
	"QUERY_REQUEST":              20,
	"QUERY_RESPONSE":             21,
	"WRITE_REQUEST":              22,
	"WRITE_RESPONSE":             23,
	"GET_CONFIGURATION_REQUEST":  32,
	"GET_CONFIGURATION_RESPONSE": 33,
	"SET_CONFIGURATION_REQUEST":  34,
	"SET_CONFIGURATION_RESPONSE": 35,
}

func (x Packet_Type) String() string {
	return proto1.EnumName(Packet_Type_name, int32(x))
}

type ClientResponse_Status int32

const (
	ClientResponse_UNKNOWN          ClientResponse_Status = 0
	ClientResponse_OK               ClientResponse_Status = 1
	ClientResponse_TIMED_OUT        ClientResponse_Status = 2
	ClientResponse_NOT_LEADER       ClientResponse_Status = 3
	ClientResponse_CONFLICT         ClientResponse_Status = 4
	ClientResponse_INVALID_SESSION  ClientResponse_Status = 5
	ClientResponse_INVALID_ARGUMENT ClientResponse_Status = 6
)

var ClientResponse_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "OK",
	2: "TIMED_OUT",
	3: "NOT_LEADER",
	4: "CONFLICT",
	5: "INVALID_SESSION",
	6: "INVALID_ARGUMENT",
}
var ClientResponse_Status_value = map[string]int32{
	"UNKNOWN":          0,
	"OK":               1,
	"TIMED_OUT":        2,
	"NOT_LEADER":       3,
	"CONFLICT":         4,
	"INVALID_SESSION":  5,
	"INVALID_ARGUMENT": 6,
}

func (x ClientResponse_Status) String() string {
	return proto1.EnumName(ClientResponse_Status_name, int32(x))
}

type Peer struct {
	Id    uint32     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Addr  string     `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	State Peer_State `protobuf:"varint,3,opt,name=state,enum=raft.Peer_State" json:"state,omitempty"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto1.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}

type Configuration struct {
	Id    uint64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Peers []*Peer `protobuf:"bytes,2,rep,name=peers" json:"peers,omitempty"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto1.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}

func (m *Configuration) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type Metadata struct {
	// A counter increased monotonically each time a metadata file is written.
	MetadataVersion uint64 `protobuf:"varint,1,opt,name=metadata_version" json:"metadata_version,omitempty"`
	// A counter increased monotonically each time a snapshot file is written.
	SnapshotVersion uint64 `protobuf:"varint,2,opt,name=snapshot_version" json:"snapshot_version,omitempty"`
	// The index of the first log entry.  This is also the index of the log entry
	// that immediately follows the snapshot.
	StartIndex uint64 `protobuf:"varint,3,opt,name=start_index" json:"start_index,omitempty"`
	// The election term of the log entry that came immediately before start_index.
	BeforeStartTerm uint64 `protobuf:"varint,4,opt,name=before_start_term" json:"before_start_term,omitempty"`
	// The current election term.
	CurrentTerm uint64 `protobuf:"varint,5,opt,name=current_term" json:"current_term,omitempty"`
	// The ID of the server that this server voted for.
	VotedFor uint32 `protobuf:"varint,6,opt,name=voted_for" json:"voted_for,omitempty"`
	// The current cluster configuration at the time of this metadata save.
	Configuration *Configuration `protobuf:"bytes,7,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *Metadata) Reset()         { *m = Metadata{} }
func (m *Metadata) String() string { return proto1.CompactTextString(m) }
func (*Metadata) ProtoMessage()    {}

func (m *Metadata) GetConfiguration() *Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

type Snapshot struct {
	// The state machine's snapshot.
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto1.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}

type LogEntry struct {
	// The index of this log entry.  Not used on the wire.
	Index uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// The election term in which this entry was recorded.
	Term uint64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	// The type of entry.  Determines the meaning of the payload field.
	Type LogEntry_Type `protobuf:"varint,3,opt,name=type,enum=raft.LogEntry_Type" json:"type,omitempty"`
	// The state change that this entry records.
	Payload []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto1.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}

type Packet struct {
	// The UUID of the Raft cluster which this packet is intended for.
	Cluster []byte `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// The server which sent the packet, or 0 if it came from a client.
	SourceId uint32 `protobuf:"varint,2,opt,name=source_id" json:"source_id,omitempty"`
	// The client session ID for this packet, or 0 if this is a server-server packet.
	SessionId uint32 `protobuf:"varint,3,opt,name=session_id" json:"session_id,omitempty"`
	// The request ID for this packet, or 0 if this is a server-server packet.
	RequestId uint32 `protobuf:"varint,4,opt,name=request_id" json:"request_id,omitempty"`
	// The type of packet.
	Type Packet_Type `protobuf:"varint,5,opt,name=type,enum=raft.Packet_Type" json:"type,omitempty"`
	// The payload of the packet.  Interpretation depends on the packet type.
	Payload []byte `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto1.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}

type VoteRequest struct {
	// The currentTerm of the caller.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// Term of the last entry in the caller's log.
	LatestTerm uint64 `protobuf:"varint,2,opt,name=latest_term" json:"latest_term,omitempty"`
	// Index of the last entry in the caller's log.
	LatestIndex uint64 `protobuf:"varint,3,opt,name=latest_index" json:"latest_index,omitempty"`
}

func (m *VoteRequest) Reset()         { *m = VoteRequest{} }
func (m *VoteRequest) String() string { return proto1.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()    {}

type VoteResponse struct {
	// The currentTerm of the callee.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// true iff the follower/callee granted its vote to the candidate/caller.
	Granted bool `protobuf:"varint,2,opt,name=granted" json:"granted,omitempty"`
	// true iff the candidate/caller is at least as caught up as the follower/callee.
	LogIsOk bool `protobuf:"varint,3,opt,name=log_is_ok" json:"log_is_ok,omitempty"`
}

func (m *VoteResponse) Reset()         { *m = VoteResponse{} }
func (m *VoteResponse) String() string { return proto1.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()    {}

type AppendEntriesRequest struct {
	// The currentTerm of the caller.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// The log entries to append.  May be empty.
	Entries []*LogEntry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
	// Term of the entry preceding Entries.
	PrevLogTerm uint64 `protobuf:"varint,3,opt,name=prev_log_term" json:"prev_log_term,omitempty"`
	// Index of the entry preceding Entries,
	// or log.LatestIndex() if Entries is empty.
	PrevLogIndex uint64 `protobuf:"varint,4,opt,name=prev_log_index" json:"prev_log_index,omitempty"`
	// The log.CommitIndex of the leader.
	LeaderCommitIndex uint64 `protobuf:"varint,5,opt,name=leader_commit_index" json:"leader_commit_index,omitempty"`
}

func (m *AppendEntriesRequest) Reset()         { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string { return proto1.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()    {}

func (m *AppendEntriesRequest) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendEntriesResponse struct {
	// The currentTerm of the callee.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// True iff new entries were added to the log.
	Success bool `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	// The callee's resulting log.LatestIndex().
	LatestIndex uint64 `protobuf:"varint,3,opt,name=latest_index" json:"latest_index,omitempty"`
	// The callee's resulting log.CommitIndex.
	CommitIndex uint64 `protobuf:"varint,4,opt,name=commit_index" json:"commit_index,omitempty"`
}

func (m *AppendEntriesResponse) Reset()         { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string { return proto1.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()    {}

type NominateRequest struct {
	// The currentTerm of the caller.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
}

func (m *NominateRequest) Reset()         { *m = NominateRequest{} }
func (m *NominateRequest) String() string { return proto1.CompactTextString(m) }
func (*NominateRequest) ProtoMessage()    {}

type InformRequest struct {
	// The currentTerm of the caller.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// The caller's current leader, i.e. the server which sent an
	// AppendEntriesRequest to the caller.
	LeaderId uint32 `protobuf:"varint,2,opt,name=leader_id" json:"leader_id,omitempty"`
}

func (m *InformRequest) Reset()         { *m = InformRequest{} }
func (m *InformRequest) String() string { return proto1.CompactTextString(m) }
func (*InformRequest) ProtoMessage()    {}

type CreateSessionRequest struct {
}

func (m *CreateSessionRequest) Reset()         { *m = CreateSessionRequest{} }
func (m *CreateSessionRequest) String() string { return proto1.CompactTextString(m) }
func (*CreateSessionRequest) ProtoMessage()    {}

type DestroySessionRequest struct {
}

func (m *DestroySessionRequest) Reset()         { *m = DestroySessionRequest{} }
func (m *DestroySessionRequest) String() string { return proto1.CompactTextString(m) }
func (*DestroySessionRequest) ProtoMessage()    {}

type QueryRequest struct {
	Command []byte `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto1.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}

type WriteRequest struct {
	Command []byte `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *WriteRequest) Reset()         { *m = WriteRequest{} }
func (m *WriteRequest) String() string { return proto1.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()    {}

type GetConfigurationRequest struct {
}

func (m *GetConfigurationRequest) Reset()         { *m = GetConfigurationRequest{} }
func (m *GetConfigurationRequest) String() string { return proto1.CompactTextString(m) }
func (*GetConfigurationRequest) ProtoMessage()    {}

type SetConfigurationRequest struct {
	Configuration *Configuration `protobuf:"bytes,1,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *SetConfigurationRequest) Reset()         { *m = SetConfigurationRequest{} }
func (m *SetConfigurationRequest) String() string { return proto1.CompactTextString(m) }
func (*SetConfigurationRequest) ProtoMessage()    {}

func (m *SetConfigurationRequest) GetConfiguration() *Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

type ForceElectionRequest struct {
	OldTerm uint64 `protobuf:"varint,1,opt,name=old_term" json:"old_term,omitempty"`
}

func (m *ForceElectionRequest) Reset()         { *m = ForceElectionRequest{} }
func (m *ForceElectionRequest) String() string { return proto1.CompactTextString(m) }
func (*ForceElectionRequest) ProtoMessage()    {}

type LameDuckRequest struct {
	LameduckOn bool `protobuf:"varint,1,opt,name=lameduck_on" json:"lameduck_on,omitempty"`
}

func (m *LameDuckRequest) Reset()         { *m = LameDuckRequest{} }
func (m *LameDuckRequest) String() string { return proto1.CompactTextString(m) }
func (*LameDuckRequest) ProtoMessage()    {}

type ClientResponse struct {
	Status        ClientResponse_Status `protobuf:"varint,1,opt,name=status,enum=raft.ClientResponse_Status" json:"status,omitempty"`
	Payload       []byte                `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Configuration *Configuration        `protobuf:"bytes,3,opt,name=configuration" json:"configuration,omitempty"`
	LeaderId      uint32                `protobuf:"varint,4,opt,name=leader_id" json:"leader_id,omitempty"`
	CurrentTerm   uint64                `protobuf:"varint,5,opt,name=current_term" json:"current_term,omitempty"`
	CommitIndex   uint64                `protobuf:"varint,6,opt,name=commit_index" json:"commit_index,omitempty"`
	NextIndex     uint64                `protobuf:"varint,7,opt,name=next_index" json:"next_index,omitempty"`
	ErrorMessage  string                `protobuf:"bytes,16,opt,name=error_message" json:"error_message,omitempty"`
	Redirect      string                `protobuf:"bytes,17,opt,name=redirect" json:"redirect,omitempty"`
}

func (m *ClientResponse) Reset()         { *m = ClientResponse{} }
func (m *ClientResponse) String() string { return proto1.CompactTextString(m) }
func (*ClientResponse) ProtoMessage()    {}

func (m *ClientResponse) GetConfiguration() *Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func init() {
	proto1.RegisterEnum("raft.Peer_State", Peer_State_name, Peer_State_value)
	proto1.RegisterEnum("raft.LogEntry_Type", LogEntry_Type_name, LogEntry_Type_value)
	proto1.RegisterEnum("raft.Packet_Type", Packet_Type_name, Packet_Type_value)
	proto1.RegisterEnum("raft.ClientResponse_Status", ClientResponse_Status_name, ClientResponse_Status_value)
}
