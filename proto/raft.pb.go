// Code generated by protoc-gen-go.
// source: raft.proto
// DO NOT EDIT!

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	Peer
	LogEntry
	State
	Packet
	VoteRequest
	VoteResponse
	AppendEntry
	AppendEntriesRequest
	AppendEntriesResponse
	NominateRequest
	InformRequest
*/
package raft

import proto "github.com/golang/protobuf/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Packet_Type int32

const (
	Packet_INVALID                 Packet_Type = 0
	Packet_VOTE_REQUEST            Packet_Type = 1
	Packet_VOTE_RESPONSE           Packet_Type = 2
	Packet_APPEND_ENTRIES_REQUEST  Packet_Type = 3
	Packet_APPEND_ENTRIES_RESPONSE Packet_Type = 4
	Packet_NOMINATE_REQUEST        Packet_Type = 5
	Packet_INFORM_REQUEST          Packet_Type = 6
)

var Packet_Type_name = map[int32]string{
	0: "INVALID",
	1: "VOTE_REQUEST",
	2: "VOTE_RESPONSE",
	3: "APPEND_ENTRIES_REQUEST",
	4: "APPEND_ENTRIES_RESPONSE",
	5: "NOMINATE_REQUEST",
	6: "INFORM_REQUEST",
}
var Packet_Type_value = map[string]int32{
	"INVALID":                 0,
	"VOTE_REQUEST":            1,
	"VOTE_RESPONSE":           2,
	"APPEND_ENTRIES_REQUEST":  3,
	"APPEND_ENTRIES_RESPONSE": 4,
	"NOMINATE_REQUEST":        5,
	"INFORM_REQUEST":          6,
}

func (x Packet_Type) String() string {
	return proto.EnumName(Packet_Type_name, int32(x))
}

type Peer struct {
	Id   uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Ip   []byte `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,3,opt,name=port" json:"port,omitempty"`
	Zone string `protobuf:"bytes,4,opt,name=zone" json:"zone,omitempty"`
}

func (m *Peer) Reset()         { *m = Peer{} }
func (m *Peer) String() string { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()    {}

type LogEntry struct {
	Term    uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Command []byte `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}

type State struct {
	Peers       []*Peer     `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
	Logs        []*LogEntry `protobuf:"bytes,2,rep,name=logs" json:"logs,omitempty"`
	VotedForId  uint32      `protobuf:"varint,3,opt,name=voted_for_id" json:"voted_for_id,omitempty"`
	CurrentTerm uint64      `protobuf:"varint,4,opt,name=current_term" json:"current_term,omitempty"`
	StartTerm   uint64      `protobuf:"varint,5,opt,name=start_term" json:"start_term,omitempty"`
	StartIndex  uint64      `protobuf:"varint,6,opt,name=start_index" json:"start_index,omitempty"`
	Snapshot    []byte      `protobuf:"bytes,7,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}

func (m *State) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

func (m *State) GetLogs() []*LogEntry {
	if m != nil {
		return m.Logs
	}
	return nil
}

type Packet struct {
	Type    Packet_Type `protobuf:"varint,1,opt,name=type,enum=raft.Packet_Type" json:"type,omitempty"`
	Payload []byte      `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}

type VoteRequest struct {
	// The currentTerm of the caller.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// Term of the last entry in the caller's log.
	LatestTerm uint64 `protobuf:"varint,2,opt,name=latest_term" json:"latest_term,omitempty"`
	// Index of the last entry in the caller's log.
	LatestIndex uint64 `protobuf:"varint,3,opt,name=latest_index" json:"latest_index,omitempty"`
}

func (m *VoteRequest) Reset()         { *m = VoteRequest{} }
func (m *VoteRequest) String() string { return proto.CompactTextString(m) }
func (*VoteRequest) ProtoMessage()    {}

type VoteResponse struct {
	// The currentTerm of the callee.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// true iff the follower/callee granted its vote to the candidate/caller.
	Granted bool `protobuf:"varint,2,opt,name=granted" json:"granted,omitempty"`
	// true iff the candidate/caller is at least as caught up as the follower/callee.
	LogIsOk bool `protobuf:"varint,3,opt,name=log_is_ok" json:"log_is_ok,omitempty"`
}

func (m *VoteResponse) Reset()         { *m = VoteResponse{} }
func (m *VoteResponse) String() string { return proto.CompactTextString(m) }
func (*VoteResponse) ProtoMessage()    {}

type AppendEntry struct {
	// Term in which the entry was proposed.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// The state machine command to be committed.
	Command []byte `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
}

func (m *AppendEntry) Reset()         { *m = AppendEntry{} }
func (m *AppendEntry) String() string { return proto.CompactTextString(m) }
func (*AppendEntry) ProtoMessage()    {}

type AppendEntriesRequest struct {
	// The currentTerm of the caller.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// The log entries to append.  May be empty.
	Entries []*AppendEntry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
	// Term of the entry preceding Entries.
	PrevLogTerm uint64 `protobuf:"varint,3,opt,name=prev_log_term" json:"prev_log_term,omitempty"`
	// Index of the entry preceding Entries,
	// or log.LatestIndex() if Entries is empty.
	PrevLogIndex uint64 `protobuf:"varint,4,opt,name=prev_log_index" json:"prev_log_index,omitempty"`
	// The log.CommitIndex of the leader.
	LeaderCommitIndex uint64 `protobuf:"varint,5,opt,name=leader_commit_index" json:"leader_commit_index,omitempty"`
}

func (m *AppendEntriesRequest) Reset()         { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()    {}

func (m *AppendEntriesRequest) GetEntries() []*AppendEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type AppendEntriesResponse struct {
	// The currentTerm of the callee.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// True iff new entries were added to the log.
	Success bool `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	// The callee's resulting log.LatestIndex().
	LatestIndex uint64 `protobuf:"varint,3,opt,name=latest_index" json:"latest_index,omitempty"`
	// The callee's resulting log.CommitIndex.
	CommitIndex uint64 `protobuf:"varint,4,opt,name=commit_index" json:"commit_index,omitempty"`
}

func (m *AppendEntriesResponse) Reset()         { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()    {}

type NominateRequest struct {
	// The currentTerm of the caller.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
}

func (m *NominateRequest) Reset()         { *m = NominateRequest{} }
func (m *NominateRequest) String() string { return proto.CompactTextString(m) }
func (*NominateRequest) ProtoMessage()    {}

type InformRequest struct {
	// The currentTerm of the caller.
	Term uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	// The caller's current leader, i.e. the peer which sent an
	// AppendEntriesRequest to the caller.
	LeaderId uint32 `protobuf:"varint,2,opt,name=leader_id" json:"leader_id,omitempty"`
}

func (m *InformRequest) Reset()         { *m = InformRequest{} }
func (m *InformRequest) String() string { return proto.CompactTextString(m) }
func (*InformRequest) ProtoMessage()    {}

func init() {
	proto.RegisterEnum("raft.Packet_Type", Packet_Type_name, Packet_Type_value)
}
